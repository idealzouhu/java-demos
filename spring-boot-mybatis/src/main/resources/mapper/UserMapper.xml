<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zouhu.springboot.mybatis.mapper.UserMapper">
    <!-- 查询单个用户 -->
    <select id="selectAll" resultType="com.zouhu.springboot.mybatis.entity.User">
        select * from user
    </select>

    <!-- 查询单个用户 -->
    <!-- #{id} 是 selectById 方法里面传入的参数值 -->
    <select id="selectById" parameterType="Long" resultType="com.zouhu.springboot.mybatis.entity.User">
        SELECT * FROM user WHERE id = #{id}
    </select>

    <!-- 插入用户 -->
    <!-- #{name}, #{age}, 和 #{email} 将分别绑定到 User 实体类中的 name, age, 和 email 属性。
         其原理是结果映射 https://mybatis.net.cn/sqlmap-xml.html#Result_Maps ，MyBatis 会自动将查询结果映射到 User 实体类中。
    -->
    <insert id="insertUser" parameterType="com.zouhu.springboot.mybatis.entity.User">
        INSERT INTO user (id, name, phone, sex, status) VALUES (#{id}, #{name}, #{phone}, #{sex}, #{status})
    </insert>

    <!-- 更新用户 -->
    <update id="updateUser" parameterType="com.zouhu.springboot.mybatis.entity.User">
        UPDATE user
        SET name = #{name},
            phone = #{phone},
            sex = #{sex},
            status = #{status}
        WHERE id = #{id}
    </update>

    <!-- 删除用户 -->
    <delete id="deleteById" parameterType="Long">
        DELETE FROM user WHERE id = #{id}
    </delete>

    <!-- 查询用户及其订单号 -->
    <select id="selectUsersWithOrderNumbers" resultType="com.zouhu.springboot.mybatis.dto.UserOrderDTO">
        SELECT
            u.id AS userId,
            u.name AS userName,
            o.number AS orderNumber
        FROM user u
        LEFT JOIN orders o ON u.id = o.user_id
    </select>

</mapper>
